import{_ as a,b as n,k as p,o as e}from"./app-oiS3pDlr.js";const c={};function l(i,s){return e(),n("div",null,s[0]||(s[0]=[p(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言"><span>1. 前言</span></a></h2><p>在自己独立开发一个项目的过程中，我发现了一些以往写小 Demo 从来没有遇到过的问题。</p><p>最近在独立制作一个全栈的通知管理平台。一开始我没有考虑太多，直接根据头脑中零星的想法就开撸后端数据库 model 和 API，用的是学了半成品的 MongoDb。</p><p>结果就是写到后面在遇到复杂的数据库依赖关系时，我感到崩溃。这才想起指导老师给我发了一篇计算机的论文，我便开始虚心研究。</p><p>做一个项目要经过这些过程：</p><ul><li>系统分析 <ul><li>可行性分析</li><li>用户需求分析</li><li>整体功能模块分析</li><li>技术分析</li><li>系统流程分析</li></ul></li><li>系统设计 <ul><li>系统功能模块设计</li><li>系统结构设计</li><li>数据库概念设计 <ul><li>数据库设计</li><li>数据库表设计</li></ul></li></ul></li><li>系统实现 <ul><li>功能模块的实现</li><li>API 接口功能的实现</li></ul></li><li>系统测试 <ul><li>黑盒和白盒测试</li><li>测试环境与条件</li><li>功能测试</li></ul></li></ul><p>敲代码的时候思维很局限，总觉得完成了某一个单个功能就算成功。真到让我独立设计一个项目，我还真就难住了。这里就来讲讲我第一个遇到的问题，数据库怎么设计？</p><p>本文用到的工具：</p><blockquote><p><a href="https://eraser.io/" target="_blank" rel="noopener noreferrer">eraser.io</a></p></blockquote><h2 id="_2-构建实体" tabindex="-1"><a class="header-anchor" href="#_2-构建实体"><span>2. 构建实体</span></a></h2><p>打开一额<code>eraser.io</code>文件，在左侧写入所有的实体<code>Entity</code>，例如：</p><ul><li>用户</li><li>班级</li><li>通知</li></ul><p>然后在<code>canvas</code>中添加一个<code>Diagram as Code &gt; Entity Relationship</code>也就是<code>E-R</code>图。</p><blockquote><p>✨ 一个最佳实践：总是从用户表<code>User-Table</code>开始着手你的 E-R 图设计。 这是因为，一切都是为了用户用户就是上帝。</p></blockquote><p>从用户表开始，并从用户的注册开始。</p><p>我们的用户表可以是这样：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>User</span><span class="space"> </span><span>{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>id</span><span class="space"> </span><span>string</span><span class="space"> </span><span>pk</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>username</span><span class="space"> </span><span>string</span><span class="space"> </span><span>unique</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>email</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>bio</span><span class="space"> </span><span>string</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331011304.png" alt="20250331011304"></p><blockquote><p>强调一点：业务逻辑永远不要成为主键，例如这里除了<code>id</code>外所有的属性皆是如此。</p></blockquote><p>也许你不需要一个<code>createdAt</code>键，但一个很中肯的建议是添加它，总有一天你会需要它的，当你需要它的时候可不能后悔。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>User</span><span class="space"> </span><span>{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>id</span><span class="space"> </span><span>string</span><span class="space"> </span><span>pk</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>username</span><span class="space"> </span><span>string</span><span class="space"> </span><span>unique</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>email</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>bio</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>createdAt</span><span class="space"> </span><span>timestamp</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的方法，添加班级、通知，完成后如下图所示：</p><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331013108.png" alt="20250331013108"></p><h2 id="_3-构建关系" tabindex="-1"><a class="header-anchor" href="#_3-构建关系"><span>3. 构建关系</span></a></h2><p>关系分为多种：</p><ul><li>一对一</li><li>一对多</li><li>多对多</li></ul><p>这里用户和班级之间存在多对多的关系，构建关系时我们也总遵循从<code>User</code>表开始的原则，正如之前提到的，用户是整个产品的核心。</p><p>为了加深对关系的了解，这里举个用户发推文的例子：一个用户能发多个推文，每一条推文只有一个用户作为作者。这是一对多的关系，一个用户对应多个推文，但每一条推文只能对应一个用户。</p><p>在这里，假如我希望一个班级对应多条通知，在<code>eraser.io</code>中可以使用这样的语法来表示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>一对多</span></span>
<span class="line"><span>Classes.id</span><span class="space"> </span><span>&lt;</span><span class="space"> </span><span>Notifies.classId</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里用到的关系符号是<code>&lt;</code>，同样的还有一对一和多对多，分别用<code>-</code>和<code>&lt;&gt;</code>符号表示数量关系。</p><p>观察上面的代码你会发现一个问题：通知实体并没有<code>classId</code>这个键。</p><p>这就是我们需要创建的，这里<code>classId</code>是一个外键，表示引用了一个其他表的主键。</p><p>我们修改通知<code>Entity</code>的结构：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Notify</span><span class="space"> </span><span>{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>id</span><span class="space"> </span><span>string</span><span class="space"> </span><span>pk</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>title</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>content</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>createdAt</span><span class="space"> </span><span>timestamp</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>classId</span><span class="space"> </span><span>string</span><span class="space"> </span><span>pk</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Class.id</span><span class="space"> </span><span>&lt;</span><span class="space"> </span><span>Notify.classId</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后大概是这样：</p><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/pk.png" alt="pk"></p><p>这里我们再添加一个<code>Media</code>实体：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Media</span><span class="space"> </span><span>{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>id</span><span class="space"> </span><span>string</span><span class="space"> </span><span>pk</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>fileUrl</span><span class="space"> </span><span>string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>type</span><span class="space"> </span><span>enum</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>createdAt</span><span class="space"> </span><span>timestamp</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，一个班级对应多条通知，一条通知可能对应了多个媒体，所以媒体也需要一个类似的外键来唯一的引用一个它所对应的通知。</p><blockquote><p>你有没有想过为什么反过来不行，为什么不是通知的外键引用到媒体呢？ 很显然，通知对应多个媒体，一条外键是不够的，而媒体只对应一个通知，一个外键就刚好。</p></blockquote><p>添加完成后我们再来加上颜色和图标就是这个效果：</p><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331015205.png" alt="20250331015205"></p><p>关键其实还有语义化的功能，在看到这个外键后就知道通知与某个班级有关，媒体与某条通知相关。</p><p>在这种情况下外键是很有意义的。</p><p>如果我们的用户能够在每一条通知下进行评论，就需要一个<code>Comments</code>实体。很明显他用外键和唯一的用户关联表示该用户的评论。</p><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331020311.png" alt="20250331020311"></p><p>在这里，用户和评论是一对多的关系，通知和评论也是一对多的关系，所以你能看到在评论的身上有两条外键分别拉到了用户和通知身上。</p><p>根据同样的一对多的原理，我们来制造一个<code>like</code>，也就是用户对评论的点赞：</p><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331021319.png" alt="20250331021319"></p><h2 id="_4-多对多" tabindex="-1"><a class="header-anchor" href="#_4-多对多"><span>4. 多对多</span></a></h2><p>根据上面的例子我们不难发现，要处理一对一、一对多的关系都能直接使用外键来处理。</p><p>但是多对多呢？</p><p>用户的好友是一个多对多的关系，用户可以有多个好友，很多人也可以加这个用户作为好友。</p><p>我们的班级和用户之间也是这样的关系，班级可以有很多成员而成员也能加入很多班级。</p><blockquote><p>对于多对多的关系我们一般新建一个表，例如，用户好友的关系。</p></blockquote><p><img src="https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331022917.png" alt="20250331022917"></p><p>这里比较令人困惑，要仔细看看。</p><p>这张表实际上就是单独跟踪了谁关注了谁，有两个字段：关注<code>follow</code>，粉丝<code>follower</code>。</p><p>如果要查询用户的粉丝可以用<code>select * from Friends where follow = user_id</code>就能查询到用户的所有粉丝。</p><p>如果要查询用户的关注列表就是：<code>select * from Friends where follower = user_id</code>。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><p>关于数据库的设计关键是将所有实体抽象出来，并理清楚实体之间的关系。</p><p>本次实验🧪的链接：https://app.eraser.io/workspace/1GT4Nb82OR4LTYIuOmkT</p>`,64)]))}const o=a(c,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/gq93gfva/","title":"设计一个实际可用的数据库","lang":"zh-CN","frontmatter":{"title":"设计一个实际可用的数据库","createTime":"2025/03/31 00:51:13","permalink":"/article/gq93gfva/","description":"1. 前言 在自己独立开发一个项目的过程中，我发现了一些以往写小 Demo 从来没有遇到过的问题。 最近在独立制作一个全栈的通知管理平台。一开始我没有考虑太多，直接根据头脑中零星的想法就开撸后端数据库 model 和 API，用的是学了半成品的 MongoDb。 结果就是写到后面在遇到复杂的数据库依赖关系时，我感到崩溃。这才想起指导老师给我发了一篇计算...","head":[["meta",{"property":"og:url","content":"https://shenying.online/article/gq93gfva/"}],["meta",{"property":"og:site_name","content":"Sy_blogSite"}],["meta",{"property":"og:title","content":"设计一个实际可用的数据库"}],["meta",{"property":"og:description","content":"1. 前言 在自己独立开发一个项目的过程中，我发现了一些以往写小 Demo 从来没有遇到过的问题。 最近在独立制作一个全栈的通知管理平台。一开始我没有考虑太多，直接根据头脑中零星的想法就开撸后端数据库 model 和 API，用的是学了半成品的 MongoDb。 结果就是写到后面在遇到复杂的数据库依赖关系时，我感到崩溃。这才想起指导老师给我发了一篇计算..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331011304.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T18:40:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T18:40:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计一个实际可用的数据库\\",\\"image\\":[\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331011304.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331013108.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/pk.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331015205.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331020311.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331021319.png\\",\\"https://ccccooh.oss-cn-hangzhou.aliyuncs.com/img/20250331022917.png\\"],\\"dateModified\\":\\"2025-03-30T18:40:29.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.38,"words":1613},"git":{"updatedTime":1743360029000,"contributors":[{"name":"sy","username":"sy","email":"c3156298376@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sy?v=4","url":"https://github.com/sy"}]},"autoDesc":true,"filePathRelative":"项目设计/设计一个实际的数据库关系.md","categoryList":[{"id":"9d752d","sort":10000,"name":"项目设计"}]}');export{o as comp,d as data};
