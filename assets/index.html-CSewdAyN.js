import{_ as i,b as a,k as e,o as n}from"./app-oiS3pDlr.js";const t={};function p(l,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>判断一个数据的类型，常用的方法有以下几种：</p><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call(xxx)</code></li></ul><blockquote><p>下面来分别分析一下这三种方法各自的优缺点</p></blockquote><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h2><p><code>typeof</code>的本意是用来判断一个数据的数据类型，所以返回的也是一个数据类型。但是会遇到下面这些问题：</p><ul><li>无法判断 <code>null</code>。</li><li>无法判断除了 <code>function</code> 之外的引用类型。</li></ul><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">无法判断</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">null。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;object&#39;，原因在文章末尾解释。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">无法判断除了</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">function</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">之外的引用类型。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;object&#39;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{});</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;object&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="incetance-of" tabindex="-1"><a class="header-anchor" href="#incetance-of"><span>incetance of</span></a></h2><p>可以看到，<code>type of</code>无法精确判断对象的引用类型。所以在判断一个对象的引用类型时一般使用<code>incetance of</code>关键字。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([]</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">instanceof</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str1</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">instanceof</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">false，无法判断原始类型。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是<code>incetance of</code>无法准确判断原始数据类型，只能用来判断数据是否是某个类的引用。到这里就能发现，如果把<code>incetance of</code>和<code>type of</code>结合起来基本就能判断所有的数据类型了。</p><p>但是，别忘记还有一个<code>null</code>，对于<code>null</code>还需要进行特殊的处理。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span class="tab">	</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">object</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">===</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">null</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合这两种方法基本已经掌握了判断数据类型的手段了，但是如果去写一下你还是会发现很麻烦，你必须枚举每一种类型利用<code>true</code>or<code>false</code>判断数据类型。</p><p>这里的<code>null</code>必须单独判断，因为这是第一版<code>JavaScript</code>留下来的一个bug。</p><p>JavaScript 中不同对象在底层都表示为二进制，而 JavaScript 中会把二进制前三位都为 0 的判断为 <code>object</code> 类型，而 <code>null</code> 的二进制表示全都是 0，自然前三位也是 0，所以执行 <code>typeof</code> 时会返回 <code>&#39;object&#39;</code>。</p><p>这个 bug 牵扯了太多的 Web 系统，一旦改了，会产生更多的 bug，令很多系统无法工作，也许这个 bug 永远都不会修复了。</p><h2 id="object-prototype-tostring-call-xxx" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call-xxx"><span>Object.prototype.toString.call(xxx)</span></a></h2><p>这个时候就不得不提到下面这种方法了：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">prototype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([])</span><span class="tab">	</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[object</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Array]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个方法会返回统一格式的字符串：<code>[object Xxx]</code>。然后再取出后面的<code>xxx</code>即可得到准确的数据类型。对于取出后面的<code>xxx</code>可以使用多种方法，包括但不限于字符切片、正则表达式。</p><blockquote><p>这里调用<code>call()</code>方法是为了让<code>this</code>指向数组对象自身。</p></blockquote>`,22)]))}const c=i(t,[["render",p],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/demo/5zki1i9m/","title":"JavaScript如何实现类型判断？","lang":"zh-CN","frontmatter":{"title":"JavaScript如何实现类型判断？","createTime":"2025/02/23 21:35:59","permalink":"/demo/5zki1i9m/","description":"判断一个数据的类型，常用的方法有以下几种： typeof instanceof Object.prototype.toString.call(xxx) 下面来分别分析一下这三种方法各自的优缺点 typeof typeof的本意是用来判断一个数据的数据类型，所以返回的也是一个数据类型。但是会遇到下面这些问题： 无法判断 null。 无法判断除了 func...","head":[["meta",{"property":"og:url","content":"https://shenying.online/demo/5zki1i9m/"}],["meta",{"property":"og:site_name","content":"Sy_blogSite"}],["meta",{"property":"og:title","content":"JavaScript如何实现类型判断？"}],["meta",{"property":"og:description","content":"判断一个数据的类型，常用的方法有以下几种： typeof instanceof Object.prototype.toString.call(xxx) 下面来分别分析一下这三种方法各自的优缺点 typeof typeof的本意是用来判断一个数据的数据类型，所以返回的也是一个数据类型。但是会遇到下面这些问题： 无法判断 null。 无法判断除了 func..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T16:33:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-25T16:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript如何实现类型判断？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T16:33:29.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.14,"words":643},"git":{"updatedTime":1740501209000,"contributors":[{"name":"CCCCOOH","username":"CCCCOOH","email":"c3156298376@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/CCCCOOH?v=4","url":"https://github.com/CCCCOOH"}]},"autoDesc":true,"filePathRelative":"notes/demo/3.JavaScript/JavaScript如何实现类型判断？.md"}');export{c as comp,k as data};
